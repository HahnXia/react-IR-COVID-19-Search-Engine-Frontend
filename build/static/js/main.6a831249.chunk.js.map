{"version":3,"sources":["components/search-box/simple-search-box/simple-search-box.component.jsx","pages/main-page/main-page.component.jsx","components/doc/doc-snapshot/doc-snapshot.component.jsx","components/page-nav/page-nav.component.jsx","components/search-box/advanced-search-box/advanced-search-box.component.jsx","utils/date-parser.utils.jsx","components/modal/trend-modal.component.jsx","constant/application-properties.jsx","pages/query-page/query-page.component.jsx","pages/doc-page/doc-page.component.jsx","App.js","serviceWorker.js","index.js","assets/img/covid19.jpg","assets/img/trend_test.jpg"],"names":["SimpleSearchBox","props","handleChange","event","setState","text","target","value","handleSubmit","preventDefault","localStorage","setItem","state","history","push","pathname","Form","Input","type","this","title","onChange","placeholder","Button","className","color","onClick","outline","Component","withRouter","MainPage","pageHeader","React","createRef","useEffect","window","innerWidth","updateScroll","windowScrollTop","pageYOffset","current","style","transform","addEventListener","removeEventListener","backgroundImage","require","ref","data-parallax","Container","DocSnapshot","docInfo","embedding","info","covidMeta","authors","undefined","length","i","snapshootText","sentence","textAbstract","substring","bodyText","score","Col","sm","url","href","fontSize","e","handleRedirectDocInfo","ID","Row","publishTime","PageNav","curPage","totalPage","handleNav","pageNumbers","items","map","pagenum","PaginationItem","key","PaginationLink","aria-label","Pagination","tabIndex","AdvancedSearchBox","handleAuthorsChange","handleTextChange","handlesubmit","handleDateSinceChange","handleEmbeddingChange","handleDateToChange","states","onSubmit","FormGroup","Label","for","id","name","queryText","InputGroup","dateFormat","timeFormat","dateSince","inputProps","InputGroupAddon","addonType","InputGroupText","aria-hidden","dateTo","DateParser","date","split","TrendModal","useState","liveDemo","setLiveDemo","Modal","isOpen","toggle","maxWidth","src","alt","SEVER_URL","QueryPage","localStore","parseDate","_d","toISOString","console","log","authorsList","author","axios","get","Constants","params","query","then","response","data","content","page","paramsSerializer","Qs","stringify","arrayFormat","totalPages","docID","curDocInfo","index","JSON","hasOwnProperty","getItem","docinfo","DocPage","parse","para","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.6a831249.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {Form, Input} from 'reactstrap';\nimport {Button} from \"reactstrap\";\n// import './search-box.styles.css';\n\n/**\n * The search bar for the index page. It will automatically call the text query for the input and redirect to the query page\n */\nclass SimpleSearchBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: ''\n        };\n    }\n\n    // Using localStorage to store the value for cross page value Initial all iterms\n    componentDidMount() {\n        localStorage.setItem('dateSince', '');\n        localStorage.setItem('queryText', '');\n        localStorage.setItem('dateTo', '');\n        localStorage.setItem('embedding', 'OFF');\n        localStorage.setItem('authors', []);\n        localStorage.setItem('curPage', 0);\n        localStorage.setItem('totalPage', -1);\n    }\n\n    // update the text state while inputing\n    handleChange = (event) => {\n        this.setState({text: event.target.value});\n    }\n\n    // redirected to the query page\n    handleSubmit = (event) => {\n        event.preventDefault();\n        localStorage.setItem('queryText', this.state.text);\n\n        this\n            .props\n            .history\n            .push({pathname: '/query'});\n    }\n\n    render() {\n        return (\n            <div>\n                <br/>\n                <Form>\n                    <Input\n                        type=\"text\"\n                        value={this.state.title}\n                        onChange={this.handleChange}\n                        placeholder='What do you want to know about COVID-19?'/>\n                    <br/>\n                    <Button\n                        className=\"btn-round mr-1\"\n                        color=\"neutral\"\n                        type=\"submit\"\n                        value=\"Submit\"\n                        onClick={this.handleSubmit}\n                        outline>Submit</Button>\n                    <Button\n                        className=\"btn-round\"\n                        color=\"neutral\"\n                        type=\"button\"\n                        value=\"Submit\"\n                        onClick={this.handleSubmit}\n                        outline>\n                        Advanced Search</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(SimpleSearchBox);","import React from 'react';\nimport {Container} from \"reactstrap\";\n\nimport SimpleSearchBox from '../../components/search-box/simple-search-box/simple-search-box.component';\n\n/**\n * The main/index page\n */\nfunction MainPage() {\n\n    let pageHeader = React.createRef();\n\n    React.useEffect(() => {\n        if (window.innerWidth < 991) {\n            const updateScroll = () => {\n                let windowScrollTop = window.pageYOffset / 3;\n                pageHeader.current.style.transform = \"translate3d(0,\" + windowScrollTop + \"px,0)\";\n            };\n            window.addEventListener(\"scroll\", updateScroll);\n            return function cleanup() {\n                window.removeEventListener(\"scroll\", updateScroll);\n            };\n        }\n    });\n\n    return (\n        <div>\n            <div\n                style={{\n                backgroundImage: \"url(\" + require(\"../../assets/img/covid19.jpg\") + \")\"\n            }}\n                ref={pageHeader}\n                className=\"page-header\"\n                data-parallax={true}>\n                <div className=\"filter\"/>\n                <Container>\n                    <div className=\"motto text-center\">\n                        <h1>COVID-19 Seach Engine</h1>\n                        <h3>Start your general search from here.</h3>\n                        <SimpleSearchBox/>\n                    </div>\n                </Container>\n            </div>\n        </div>\n    )\n\n}\n\nexport default MainPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Col, Row} from 'reactstrap';\n\n/**\n * This component is used in the query-page to list all of the search result.\n * @param {*} props\n */\nconst DocSnapshot = (props) => {\n    // Since the embedding result and normal search result have different json\n    // format, we prefetch the doc infomation into the docInfo wariable based on the\n    // search mode\n    const docInfo = props.embedding === 'ON'\n        ? props.info.covidMeta\n        : props.info;\n\n    // Show the authors or Unknown\n    let authors = '';\n    if (docInfo.authors !== undefined && docInfo.authors !== null && docInfo.authors !== undefined && docInfo.authors.length > 0) {\n        authors = docInfo.authors[0];\n        for (let i = 1; i < docInfo.authors.length && i < 3; i++) {\n            authors = authors + ', ' + docInfo.authors[i];\n        }\n        if (docInfo.authors.length >= 3) {\n            authors = authors + '...';\n        } else {\n            authors = authors + '.';\n        }\n    } else {\n        authors = 'Unknown';\n    }\n\n    // Show part of Abstract or Body text if the abstract is missing\n    const snapshootText = props.embedding === 'ON'\n        ? <p>Paragraph: {props.info.sentence.text}</p>\n        : docInfo.textAbstract !== undefined && docInfo.textAbstract !== null && docInfo.textAbstract.length > 0 && docInfo.textAbstract[0].length > 0\n            ? <p>Abstract: {docInfo\n                        .textAbstract[0]\n                        .substring(0, 800)}</p>\n            : (docInfo.bodyText !== undefined && docInfo.bodyText !== null && docInfo.bodyText.length > 0 && docInfo.bodyText[0].length > 0\n                ? <p>Body: {props\n                            .info\n                            .bodyText[0]\n                            .substring(0, 800)}</p>\n                : <p>No text</p>);\n\n    // Show score for a certain search result, since the serch results json format\n    // are not the same, we need handle it here in different ways\n    const score = props.embedding === 'OFF'\n        ? <Col sm='auto'>\n                <p>Score: {docInfo.score}</p>\n            </Col>\n        : <Col sm='auto'>\n            <p>Score: {props.info.sentence.score}</p>\n        </Col>;\n\n    // Show the original text link\n    const url = docInfo.url !== undefined && docInfo.url.length > 0\n        ? <Col sm='auto'>\n                <a href={docInfo.url}>view original text</a>\n            </Col>\n        : <div></div>;\n\n    return (\n        <div>\n            <div className=\"mt-4\">\n                <Link\n                    style={{\n                    color: '#403e3e',\n                    fontSize: 21\n                }}\n                    onClick={e => props.handleRedirectDocInfo(e, props.ID)}>{docInfo.title !== undefined && docInfo.title !== null && docInfo.title.length > 0\n                        ? docInfo.title\n                        : 'NO TITLE FOR THIS ARTICLE'}</Link>\n            </div>\n\n            <Row className=\"mt-1\">\n                <Col sm='auto'>\n                    <p>Authors: {authors}</p>\n                </Col>\n                <Col sm='auto'>\n                    <p>Publish Time: {docInfo.publishTime}</p>\n                </Col>\n\n                {score}\n                {url}\n\n            </Row>\n            {snapshootText}\n        </div>\n    )\n};\n\nexport default DocSnapshot;\n","import React from 'react';\nimport {Pagination, PaginationItem, PaginationLink} from 'reactstrap';\n\n/**\n * The page navigation component appearing at the bottom of the page in NON-Embedding mode.\n * @param {*} param0 \n */\nconst PageNav = ({curPage, totalPage, handleNav}) => {\n    // since the index starts from 0, for navigation, the first page is '1', so we plus 1 here.\n    curPage = curPage + 1;\n    const pageNumbers = [];\n\n    // The following code is responsible for dynamic page number in the nav bar.\n    // if the total page number is '-1' which is the initial number, return empty\n    if(totalPage <= 0) return <div></div>;\n    if (totalPage <= 9) {\n        for (let i = 1; i <= totalPage; i++) {\n            pageNumbers.push(i);\n        }\n    } else {\n        if (curPage <= 5) {\n            for (let i = 1; i <= 9; i++) {\n                pageNumbers.push(i);\n            }\n        } else if (curPage + 4 <= totalPage) {\n            for (let i = curPage - 4; i <= curPage + 4; i++) {\n                pageNumbers.push(i);\n            }\n        } else {\n            for (let i = totalPage - 8; i <= totalPage; i++) {\n                pageNumbers.push(i);\n            }\n        }\n    }\n\n    // generate nav component for each page\n    const items = [];\n    pageNumbers.map(pagenum => {\n        if (pagenum !== curPage) {\n            items.push(\n                <PaginationItem key={pagenum}>\n                    <PaginationLink href=\"#pablo\" onClick={e => handleNav(e, pagenum - 1)}>\n                        {pagenum}\n                    </PaginationLink>\n                </PaginationItem>\n            );\n        } else {\n            items.push(\n                <PaginationItem key={pagenum} className=\"active\">\n                    <PaginationLink href=\"#pablo\" onClick={e => handleNav(e, pagenum - 1)}>\n                        {pagenum}\n                        <span className=\"sr-only\">(current)</span>\n                    </PaginationLink>\n                </PaginationItem>\n            );\n        }\n    });\n\n\n    return (\n        \n        <nav aria-label=\"...\">\n            <Pagination>\n                <PaginationItem>\n                    <PaginationLink href=\"#pablo\" onClick={e => handleNav(e, -1)} tabIndex=\"-1\">\n                        Previous\n                    </PaginationLink>\n                </PaginationItem>\n                {items}\n                <PaginationItem>\n                    <PaginationLink href=\"#pablo\" onClick={e => handleNav(e, -2)}>\n                        Next\n                    </PaginationLink>\n                </PaginationItem>\n            </Pagination>\n        </nav>\n    );\n};\n\nexport default PageNav;","import React from 'react';\nimport Datetime from \"react-datetime\";\nimport {\n    Form,\n    FormGroup,\n    InputGroupAddon,\n    InputGroupText,\n    InputGroup,\n    Label,\n    Input,\n    Col,\n    Row\n} from 'reactstrap';\nimport {Button, Container} from \"reactstrap\";\n\n/**\n * The Advanced search box component\n * @param {*} param0 \n */\nconst AdvancedSearchBox = ({\n    handleAuthorsChange,\n    handleTextChange,\n    handlesubmit,\n    handleDateSinceChange,\n    handleEmbeddingChange,\n    handleDateToChange,\n    states\n}) => (\n\n    <div className=\"section\">\n        <Container>\n            <Form onSubmit={handlesubmit}>\n                <div>\n                    <Row>\n                        <Col sm=\"9\">\n                            <FormGroup>\n                                <Label for='text' id='bootstrap-overrides'>\n                                    Text Search\n                                </Label>\n                                <Input\n                                    id='text'\n                                    className='mr-1'\n                                    name='queryText'\n                                    type=\"text\"\n                                    value={states.queryText}\n                                    onChange={handleTextChange}/>\n                            </FormGroup>\n                        </Col>\n\n                        <Col sm=\"1\"></Col>\n                        <Col sm=\"auto\">\n                            <FormGroup>\n                                <Button\n                                    id='search-btn'\n                                    className=\"btn-round mr-1 mt-4\"\n                                    color=\"primary\"\n                                    outline\n                                    type=\"submit\">\n                                    Search\n                                </Button>\n\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </div>\n                <div className='mt-2'>\n                    <Row>\n                        <Col sm=\"3\">{states.embedding === 'ON'\n                                ? <div></div>\n                                : <FormGroup>\n                                    <Label for='author' id='bootstrap-overrides'>\n                                        Author\n                                    </Label>\n                                    <Input\n                                        id='author'\n                                        className='mr-1'\n                                        name='author'\n                                        type=\"text\"\n                                        value={states.authors}\n                                        onChange={handleAuthorsChange}/>\n                                </FormGroup>\n}\n                        </Col>\n                        <Col sm=\"3\">{states.embedding === 'ON'\n                                ? <div></div>\n                                : <FormGroup>\n                                    <Label id='bootstrap-overrides'>\n                                        Date Since\n                                    </Label>\n                                    <InputGroup className=\"date\" id=\"datetimepicker\">\n\n                                        <Datetime\n                                            dateFormat=\"YYYY-MM-DD\"\n                                            timeFormat={false}\n                                            onChange={handleDateSinceChange}\n                                            value={states.dateSince}\n                                            inputProps={{\n                                            placeholder: \"\"\n                                        }}/>\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <span className=\"glyphicon glyphicon-calendar\">\n                                                    <i aria-hidden={true} className=\"fa fa-calendar\"/>\n                                                </span>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </FormGroup>\n}\n\n                        </Col>\n\n                        <Col sm=\"3\">\n                            {states.embedding === 'ON'\n                                ? <div></div>\n                                : <FormGroup>\n                                    <Label id='bootstrap-overrides'>\n                                        Date to\n                                    </Label>\n                                    <InputGroup className=\"date\" id=\"datetimepicker\">\n                                        <Datetime\n                                            dateFormat=\"YYYY-MM-DD\"\n                                            timeFormat={false}\n                                            onChange={handleDateToChange}\n                                            value={states.dateTo}\n                                            inputProps={{\n                                            placeholder: \"\"\n                                        }}/>\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <span className=\"glyphicon glyphicon-calendar\">\n                                                    <i aria-hidden={true} className=\"fa fa-calendar\"/>\n                                                </span>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </FormGroup>\n}\n                        </Col>\n                        <Col sm=\"1\"></Col>\n                        <Col sm=\"auto\">\n                            <FormGroup>\n                                <Label for=\"inputState\">Embedding Search</Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"select\"\n                                    id=\"inputState\"\n                                    value={states.embedding}\n                                    onChange={handleEmbeddingChange}>\n                                    <option>OFF</option>\n                                    <option>ON</option>\n                                </Input>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </div>\n\n            </Form>\n            <Col sm=\"5\"></Col>\n\n        </Container>\n    </div>\n\n);\n\nexport default AdvancedSearchBox;","class DateParser {\n    // fetch the elasticsearch date query format data: YYYY-MM-DD by slicing the\n    // javascript ISOdate format: i.e. 2018-03-08T08:15:16.097Z\n    static parseDate(date) {\n        return date.split('T')[0];\n    }\n}\n\nexport default DateParser;\n","import React from \"react\";\nimport {Button, Modal} from \"reactstrap\";\n\n/**\n * The TrendModal component is for showing the trend image for the query trend analysis in the embedding mode\n * NOTICE: The img src part can be diffferent among various results\n * @param {*} props \n */\nfunction TrendModal(props) {\n    const [liveDemo,\n        setLiveDemo] = React.useState(false);\n    return (\n        <div>\n            <Button color=\"primary\" type=\"button\" onClick={() => setLiveDemo(true)}>\n                View Search Trend for this embedding query\n            </Button>\n            <Modal isOpen={liveDemo} toggle={() => setLiveDemo(false)}>\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\" id=\"exampleModalLiveLabel\">\n                        {props.title}\n                    </h5>\n                </div>\n                <div className=\"modal-body\">\n                    <img style={{maxWidth: '100%'}} src={require('../../assets/img/trend_test.jpg')} alt=''/>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default TrendModal;","// Some config constants\n// NOTE: the sever url port must be the same as the backend, which are the same as 8090 as we set already\nexport const SEVER_URL = 'http://localhost:8090';\nexport const QUERY_URL = 'query';\nexport const NORMAL_QUERY = 'query';\nexport const EMBEDDING_QUERY = 'vector';\nexport const TRENDING_IMG_URL = '';\n","import React, {Component} from 'react';\nimport {Container} from 'reactstrap';\nimport axios from 'axios';\nimport Qs from 'qs';\nimport {withRouter} from 'react-router-dom';\nimport DocSnapshot from '../../components/doc/doc-snapshot/doc-snapshot.component';\nimport PageNav from '../../components/page-nav/page-nav.component';\nimport AdvancedSearchBox from '../../components/search-box/advanced-search-box/advanced-search-box.component';\nimport DateParser from '../../utils/date-parser.utils'\nimport TrendModal from '../../components/modal/trend-modal.component';\nimport * as Constants from '../../constant/application-properties';\n\n/**\n * Query page component. Contains avdvanced searchbox and query results.\n */\nclass QueryPage extends Component {\n\n    constructor(props) {\n        super(props);\n        // The embedding variable is set deliberately here, not a duplicated val as the\n        // state.embedding. Since the React is stateful, the component will be refreshed\n        // every time a relative state is updated. And the embedding results has\n        // different parsing method with the non-embedding results. We use the stateless\n        // embedding to determine the parse method\n        this.embedding = 'OFF';\n        this.state = {\n            curPage: 0,\n            totalPage: -1,\n            queryText: '',\n            authors: '',\n            dateSince: '',\n            dateTo: '',\n            embedding: 'OFF',\n            content: []\n        }\n    }\n\n    // Call when refreshing or first redirected to this page.\n    componentDidMount() {\n        // Restore the state using cache\n        this.setState({\n            curPage: localStorage.hasOwnProperty('curPage')\n                ? localStorage.getItem('curPage')\n                : 0,\n            totalPage: localStorage.hasOwnProperty('totalPage')\n                ? localStorage.getItem('totalPage')\n                : -1,\n            queryText: localStorage.hasOwnProperty('queryText')\n                ? localStorage.getItem('queryText')\n                : '',\n            authors: localStorage.hasOwnProperty('authors')\n                ? localStorage.getItem('authors')\n                : [],\n            dateSince: localStorage.hasOwnProperty('dateSince')\n                ? localStorage.getItem('dateSince')\n                : '',\n            dateTo: localStorage.hasOwnProperty('dateTo')\n                ? localStorage.getItem('dateTo')\n                : '',\n            embedding: localStorage.hasOwnProperty('embedding')\n                ? localStorage.getItem('embedding')\n                : 'OFF'\n        }, () => {\n            this.embedding = this.state.embedding;\n            // send request to the backend in embedding mode\n            if (this.state.embedding === 'ON') {\n                axios\n                    .get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.EMBEDDING_QUERY}`, {\n                    params: {\n                        query: this.state.queryText\n                    }\n                })\n                    .then(response => response.data)\n                    .then(response => {\n                        this.setState({content: response, totalPage: -1});\n                    });\n            // send request to the backend in normal mode\n            } else {\n                console.log('curPage after refresh:' + this.state.curPage);\n                axios.get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.NORMAL_QUERY}`, {\n                    params: {\n                        text: this.state.queryText,\n                        authors: this.state.authors,\n                        dateSince: this.state.dateSince,\n                        dateTo: this.state.dateTo,\n                        page: this.state.curPage\n                    },\n                    paramsSerializer: function (params) {\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\n                    }\n                })\n                    .then(response => response.data)\n                    .then(response => {\n                        this.setState({content: response.content, totalPage: response.totalPages});\n                    })\n            }\n\n        });\n\n    }\n\n    // function to cache current state\n    localStore = () => {\n        localStorage.setItem('dateSince', this.state.dateSince);\n        localStorage.setItem('queryText', this.state.queryText);\n        localStorage.setItem('dateTo', this.state.dateTo);\n        localStorage.setItem('embedding', this.state.embedding);\n        localStorage.setItem('authors', this.state.authors);\n        localStorage.setItem('curPage', this.state.curPage);\n    }\n\n    // handle user datesince input\n    handleDateSinceChange = (date) => {\n        date = DateParser.parseDate(date._d.toISOString());\n        this.setState({\n            dateSince: date\n        }, () => {\n            console.log(this.state.dateSince);\n        });\n    }\n\n    // handle user dateto input\n    handleDateToChange = (date) => {\n        date = DateParser.parseDate(date._d.toISOString());\n        this.setState({\n            dateTo: date\n        }, () => {\n            console.log(this.state.dateTo);\n        });\n    }\n\n    // handle user search mode input\n    handleEmbeddingChange = (event) => {\n        this.setState({\n            embedding: event.target.value\n        }, () => {\n            console.log('embedding: ' + this.state.embedding)\n        });\n    }\n\n    // handle the text query input \n    handleTextChange = (event) => {\n        const {value, name} = event.target;\n        this.setState({\n            [name]: value\n        }, () => {\n            console.log(name + ':' + value);\n        });\n    }\n\n    // handle the authors input, split them by ','\n    handleAuthorsChange = (event) => {\n        const authors = event\n            .target\n            .value\n            .split(',');\n        const authorsList = [];\n        authors.map(author => authorsList.push(author));\n        this.setState({authors: authorsList});\n    }\n\n    // submit the query \n    handleSubmit = (event) => {\n        // prevent refresh page, only forcus on content state change\n        event.preventDefault();\n        // store the current user query into cache\n        this.localStore();\n        if (this.state.embedding === 'ON') {\n            this.embedding = 'ON';\n            axios\n                .get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.EMBEDDING_QUERY}`, {\n                params: {\n                    query: this.state.queryText\n                }\n            })\n                .then(response => response.data)\n                .then(response => {\n                    this.setState({content: response, totalPage: -1});\n                })\n                .then(() => console.log(this.state.content));\n        } else {\n            this.embedding = 'OFF';\n            axios.get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.NORMAL_QUERY}`, {\n                params: {\n                    text: this.state.queryText,\n                    authors: this.state.authors,\n                    dateSince: this.state.dateSince,\n                    dateTo: this.state.dateTo,\n                    page: 0\n                },\n                paramsSerializer: function (params) {\n                    return Qs.stringify(params, {arrayFormat: 'repeat'})\n                }\n            })\n                .then(response => response.data)\n                .then(response => {\n                    this.setState({content: response.content, totalPage: response.totalPages});\n                })\n                .then(() => console.log(this.state.content));\n        }\n\n    }\n\n    // every time user page navigate, it will call the backend to fetch the res in a certain page\n    handleNav = (event, pagenum) => {\n        if (pagenum === -1) {\n            pagenum = this.state.curPage - 1;\n        } else if (pagenum === -2) {\n            pagenum = this.state.curPage + 1;\n        }\n        if (pagenum < 0 || pagenum > this.state.totalPage) \n            return;\n\n        if (this.state.embedding === 'ON') {\n            this.embedding = 'ON';\n            axios\n                .get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.EMBEDDING_QUERY}`, {\n                params: {\n                    query: this.state.queryText\n                }\n            })\n                .then(response => response.data)\n                .then(response => {\n                    this.setState({content: response, totalPage: -1, curPage: pagenum});\n                })\n                .then(() => console.log(this.state.content));\n        } else {\n            this.embedding = 'OFF';\n            axios.get(`${Constants.SEVER_URL}/${Constants.QUERY_URL}/${Constants.NORMAL_QUERY}`, {\n                params: {\n                    text: this.state.queryText,\n                    authors: this.state.authors,\n                    dateSince: this.state.dateSince,\n                    dateTo: this.state.dateTo,\n                    page: pagenum\n                },\n                paramsSerializer: function (params) {\n                    return Qs.stringify(params, {arrayFormat: 'repeat'})\n                }\n            })\n                .then(response => response.data)\n                .then(response => {\n                    this.setState({content: response.content, totalPage: response.totalPages, curPage: pagenum});\n                })\n                .then(() => this.localStore());\n        }\n    }\n\n    // when user click the result snapshoot title, it will loop through the current results to find the target\n    // doc content, then store the content into localStorage which will be fetched on the doc detailed info page.\n    handleRedirectDocInfo = (event, docID) => {\n        var curDocInfo = '';\n        this\n            .state\n            .content\n            .map((docInfo, index) => {\n                if (this.embedding === 'ON') {\n                    if (index === docID) {\n                        curDocInfo = docInfo.covidMeta\n                    }\n                } else {\n                    if (index === docID) \n                        curDocInfo = docInfo\n                }\n            });\n\n        localStorage.setItem('curDocInfo', JSON.stringify(curDocInfo));\n        this\n            .props\n            .history\n            .push({pathname: '/doc'});\n    }\n\n    render() {\n        return (\n            <div>\n                <div\n                    style={{\n                    backgroundImage: \"url(\" + require(\"../../assets/img/covid19.jpg\") + \")\"\n                }}\n                    className=\"page-header page-header-xs\"\n                    data-parallax={true}>\n                    <div className=\"filter\"/>\n                    <div className=\"motto text-center\">\n                        <h1 >\n                            COVID-19 Advanced Search\n                        </h1>\n                    </div>\n                </div>\n                <div>\n                    <AdvancedSearchBox\n                        handleTextChange={this.handleTextChange}\n                        handlesubmit={this.handleSubmit}\n                        handleDateSinceChange={this.handleDateSinceChange}\n                        handleDateToChange={this.handleDateToChange}\n                        handleEmbeddingChange={this.handleEmbeddingChange}\n                        handleAuthorsChange={this.handleAuthorsChange}\n                        states={this.state}/>\n                </div>\n                <div>\n                    <Container >\n                        {this.embedding === 'ON' && <TrendModal title={this.state.queryText}/>}\n\n                        {this\n                            .state\n                            .content\n                            .map((docinfo, index) => (<DocSnapshot\n                                key={index}\n                                ID={index}\n                                info={docinfo}\n                                embedding={this.embedding}\n                                handleRedirectDocInfo={this.handleRedirectDocInfo}/>))\n}\n                        <br/><br/>\n                        <PageNav\n                            totalPage={this.state.totalPage}\n                            curPage={this.state.curPage}\n                            handleNav={this.handleNav}/>\n                    </Container>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(QueryPage);","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {Col, Row} from 'reactstrap';\n\n/**\n * The doc page shows the detailed doc infomation \n */\nclass DocPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            'content': ''\n        }\n    }\n\n    // fetch and parse the doc info from the localStorage which is set inside the query page\n    componentDidMount() {\n        console.log(JSON.parse(localStorage.getItem('curDocInfo')));\n        this.setState({\n            content: JSON.parse(localStorage.getItem('curDocInfo'))\n        });\n    }\n\n    render() {\n        let authors = '';\n        if (this.state.content.authors !== null && this.state.content.authors !== undefined && this.state.content.authors.length > 0) {\n            authors = this.state.content.authors[0];\n            for (let i = 1; i < this.state.content.authors.length; i++) {\n                authors = authors + ', ' + this.state.content.authors[i];\n            }\n            authors = authors + '.';\n        } else {\n            authors = 'Unknown';\n        }\n\n        return (\n            <div>\n                <div\n                    style={{\n                    backgroundImage: \"url(\" + require(\"../../assets/img/covid19.jpg\") + \")\"\n                }}\n                    className=\"page-header page-header-xs\"\n                    data-parallax={true}>\n                    <div className=\"filter\"/>\n                    <div className=\"motto text-center\">\n                        <h1>\n                            COVID-19 Document Infomation\n                        </h1>\n                    </div>\n                </div>\n                <Container>\n                    <br></br>\n                    <div className=\"mt-5\">\n                        <h3>{this.state.content.title !== undefined && this.state.content.title !== null && this.state.content.title.length > 0\n                                ? this.state.content.title\n                                : 'NO TITLE FOR THIS ARTICLE'}</h3>\n                    </div>\n                    <div className=\"mt-3\">\n                        <Row>\n                            <Col sm='auto'>\n                                <p>Authors: {authors}</p>\n                            </Col>\n                            <Col sm='auto'>\n                                <p>Publish Time: {this.state.content.publishTime}</p>\n                            </Col>\n                            <Col>\n                                <a href={this.state.content.url}>view original text</a>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div>\n                        {this.state.content.textAbstract !== undefined && this.state.content.textAbstract.length > 0 && <p>Abstract: {this.state.content.textAbstract}</p>}\n                    </div>\n                    <div className=\"mt-3\">\n                        {this.state.content.bodyText !== null && this.state.content.bodyText !== undefined && this.state.content.bodyText.length > 0 && this\n                            .state\n                            .content\n                            .bodyText\n                            .map((para, index) => (\n                                <div key={index} className='mt-1'>\n                                    <p>{para}</p>\n                                </div>\n                            ))}\n                    </div>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                </Container>\n\n            </div>\n        );\n    }\n\n}\n\nexport default withRouter(DocPage);","import React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport MainPage from './pages/main-page/main-page.component';\nimport QueryPage from './pages/query-page/query-page.component';\nimport DocPage from './pages/doc-page/doc-page.component';\n\nclass App extends Component {\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div>\n                <Route exact path='/' component={MainPage} />\n                <Route exact path='/query' component={QueryPage}/>\n                <Route exact path='/doc' component={DocPage}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n// import 'bootstrap/dist/css/bootstrap.css';\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/scss/paper-kit.scss\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/covid19.63e257ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/trend_test.56bd17e0.jpg\";"],"sourceRoot":""}