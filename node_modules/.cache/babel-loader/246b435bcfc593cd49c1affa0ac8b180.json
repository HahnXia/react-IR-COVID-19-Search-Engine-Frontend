{"ast":null,"code":"import { Duration, isDuration } from './constructor';\nimport isNumber from '../utils/is-number';\nimport toInt from '../utils/to-int';\nimport absRound from '../utils/abs-round';\nimport hasOwnProp from '../utils/has-own-prop';\nimport { DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { cloneWithOffset } from '../units/offset';\nimport { createLocal } from '../create/local';\nimport { createInvalid as invalid } from './valid'; // ASP.NET json date format regex\n\nvar aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n// and further modified to allow for strings containing both week and day\nisoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\nexport function createDuration(input, key) {\n  var duration = input,\n      // matching against regexp is expensive, do it on demand\n  match = null,\n      sign,\n      ret,\n      diffRes;\n\n  if (isDuration(input)) {\n    duration = {\n      ms: input._milliseconds,\n      d: input._days,\n      M: input._months\n    };\n  } else if (isNumber(input) || !isNaN(+input)) {\n    duration = {};\n\n    if (key) {\n      duration[key] = +input;\n    } else {\n      duration.milliseconds = +input;\n    }\n  } else if (match = aspNetRegex.exec(input)) {\n    sign = match[1] === '-' ? -1 : 1;\n    duration = {\n      y: 0,\n      d: toInt(match[DATE]) * sign,\n      h: toInt(match[HOUR]) * sign,\n      m: toInt(match[MINUTE]) * sign,\n      s: toInt(match[SECOND]) * sign,\n      ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n\n    };\n  } else if (match = isoRegex.exec(input)) {\n    sign = match[1] === '-' ? -1 : 1;\n    duration = {\n      y: parseIso(match[2], sign),\n      M: parseIso(match[3], sign),\n      w: parseIso(match[4], sign),\n      d: parseIso(match[5], sign),\n      h: parseIso(match[6], sign),\n      m: parseIso(match[7], sign),\n      s: parseIso(match[8], sign)\n    };\n  } else if (duration == null) {\n    // checks for null or undefined\n    duration = {};\n  } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n    diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n    duration = {};\n    duration.ms = diffRes.milliseconds;\n    duration.M = diffRes.months;\n  }\n\n  ret = new Duration(duration);\n\n  if (isDuration(input) && hasOwnProp(input, '_locale')) {\n    ret._locale = input._locale;\n  }\n\n  if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n    ret._isValid = input._isValid;\n  }\n\n  return ret;\n}\ncreateDuration.fn = Duration.prototype;\ncreateDuration.invalid = invalid;\n\nfunction parseIso(inp, sign) {\n  // We'd normally use ~~inp for this, but unfortunately it also\n  // converts floats to ints.\n  // inp may be undefined, so careful calling replace on it.\n  var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it\n\n  return (isNaN(res) ? 0 : res) * sign;\n}\n\nfunction positiveMomentsDifference(base, other) {\n  var res = {};\n  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n\n  if (base.clone().add(res.months, 'M').isAfter(other)) {\n    --res.months;\n  }\n\n  res.milliseconds = +other - +base.clone().add(res.months, 'M');\n  return res;\n}\n\nfunction momentsDifference(base, other) {\n  var res;\n\n  if (!(base.isValid() && other.isValid())) {\n    return {\n      milliseconds: 0,\n      months: 0\n    };\n  }\n\n  other = cloneWithOffset(other, base);\n\n  if (base.isBefore(other)) {\n    res = positiveMomentsDifference(base, other);\n  } else {\n    res = positiveMomentsDifference(other, base);\n    res.milliseconds = -res.milliseconds;\n    res.months = -res.months;\n  }\n\n  return res;\n}","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/duration/create.js"],"names":["Duration","isDuration","isNumber","toInt","absRound","hasOwnProp","DATE","HOUR","MINUTE","SECOND","MILLISECOND","cloneWithOffset","createLocal","createInvalid","invalid","aspNetRegex","isoRegex","createDuration","input","key","duration","match","sign","ret","diffRes","ms","_milliseconds","d","_days","M","_months","isNaN","milliseconds","exec","y","h","m","s","parseIso","w","momentsDifference","from","to","months","_locale","_isValid","fn","prototype","inp","res","parseFloat","replace","positiveMomentsDifference","base","other","month","year","clone","add","isAfter","isValid","isBefore"],"mappings":"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","sourcesContent":["import { Duration, isDuration } from './constructor';\nimport isNumber from '../utils/is-number';\nimport toInt from '../utils/to-int';\nimport absRound from '../utils/abs-round';\nimport hasOwnProp from '../utils/has-own-prop';\nimport { DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { cloneWithOffset } from '../units/offset';\nimport { createLocal } from '../create/local';\nimport { createInvalid as invalid } from './valid';\n\n// ASP.NET json date format regex\nvar aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\nexport function createDuration(input, key) {\n    var duration = input,\n        // matching against regexp is expensive, do it on demand\n        match = null,\n        sign,\n        ret,\n        diffRes;\n\n    if (isDuration(input)) {\n        duration = {\n            ms: input._milliseconds,\n            d: input._days,\n            M: input._months,\n        };\n    } else if (isNumber(input) || !isNaN(+input)) {\n        duration = {};\n        if (key) {\n            duration[key] = +input;\n        } else {\n            duration.milliseconds = +input;\n        }\n    } else if ((match = aspNetRegex.exec(input))) {\n        sign = match[1] === '-' ? -1 : 1;\n        duration = {\n            y: 0,\n            d: toInt(match[DATE]) * sign,\n            h: toInt(match[HOUR]) * sign,\n            m: toInt(match[MINUTE]) * sign,\n            s: toInt(match[SECOND]) * sign,\n            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n        };\n    } else if ((match = isoRegex.exec(input))) {\n        sign = match[1] === '-' ? -1 : 1;\n        duration = {\n            y: parseIso(match[2], sign),\n            M: parseIso(match[3], sign),\n            w: parseIso(match[4], sign),\n            d: parseIso(match[5], sign),\n            h: parseIso(match[6], sign),\n            m: parseIso(match[7], sign),\n            s: parseIso(match[8], sign),\n        };\n    } else if (duration == null) {\n        // checks for null or undefined\n        duration = {};\n    } else if (\n        typeof duration === 'object' &&\n        ('from' in duration || 'to' in duration)\n    ) {\n        diffRes = momentsDifference(\n            createLocal(duration.from),\n            createLocal(duration.to)\n        );\n\n        duration = {};\n        duration.ms = diffRes.milliseconds;\n        duration.M = diffRes.months;\n    }\n\n    ret = new Duration(duration);\n\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {\n        ret._locale = input._locale;\n    }\n\n    if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n        ret._isValid = input._isValid;\n    }\n\n    return ret;\n}\n\ncreateDuration.fn = Duration.prototype;\ncreateDuration.invalid = invalid;\n\nfunction parseIso(inp, sign) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    var res = inp && parseFloat(inp.replace(',', '.'));\n    // apply sign while we're at it\n    return (isNaN(res) ? 0 : res) * sign;\n}\n\nfunction positiveMomentsDifference(base, other) {\n    var res = {};\n\n    res.months =\n        other.month() - base.month() + (other.year() - base.year()) * 12;\n    if (base.clone().add(res.months, 'M').isAfter(other)) {\n        --res.months;\n    }\n\n    res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n    return res;\n}\n\nfunction momentsDifference(base, other) {\n    var res;\n    if (!(base.isValid() && other.isValid())) {\n        return { milliseconds: 0, months: 0 };\n    }\n\n    other = cloneWithOffset(other, base);\n    if (base.isBefore(other)) {\n        res = positiveMomentsDifference(base, other);\n    } else {\n        res = positiveMomentsDifference(other, base);\n        res.milliseconds = -res.milliseconds;\n        res.months = -res.months;\n    }\n\n    return res;\n}\n"]},"metadata":{},"sourceType":"module"}