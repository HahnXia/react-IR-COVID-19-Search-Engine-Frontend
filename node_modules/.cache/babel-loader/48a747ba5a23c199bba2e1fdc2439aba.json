{"ast":null,"code":"import { normalizeUnits } from '../units/aliases';\nimport { hooks } from '../utils/hooks';\nvar MS_PER_SECOND = 1000,\n    MS_PER_MINUTE = 60 * MS_PER_SECOND,\n    MS_PER_HOUR = 60 * MS_PER_MINUTE,\n    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):\n\nfunction mod(dividend, divisor) {\n  return (dividend % divisor + divisor) % divisor;\n}\n\nfunction localStartOfDate(y, m, d) {\n  // the date constructor remaps years 0-99 to 1900-1999\n  if (y < 100 && y >= 0) {\n    // preserve leap years using a full 400 year cycle, then reset\n    return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n  } else {\n    return new Date(y, m, d).valueOf();\n  }\n}\n\nfunction utcStartOfDate(y, m, d) {\n  // Date.UTC remaps years 0-99 to 1900-1999\n  if (y < 100 && y >= 0) {\n    // preserve leap years using a full 400 year cycle, then reset\n    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n  } else {\n    return Date.UTC(y, m, d);\n  }\n}\n\nexport function startOf(units) {\n  var time, startOfDate;\n  units = normalizeUnits(units);\n\n  if (units === undefined || units === 'millisecond' || !this.isValid()) {\n    return this;\n  }\n\n  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n  switch (units) {\n    case 'year':\n      time = startOfDate(this.year(), 0, 1);\n      break;\n\n    case 'quarter':\n      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n      break;\n\n    case 'month':\n      time = startOfDate(this.year(), this.month(), 1);\n      break;\n\n    case 'week':\n      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n      break;\n\n    case 'isoWeek':\n      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n      break;\n\n    case 'day':\n    case 'date':\n      time = startOfDate(this.year(), this.month(), this.date());\n      break;\n\n    case 'hour':\n      time = this._d.valueOf();\n      time -= mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n      break;\n\n    case 'minute':\n      time = this._d.valueOf();\n      time -= mod(time, MS_PER_MINUTE);\n      break;\n\n    case 'second':\n      time = this._d.valueOf();\n      time -= mod(time, MS_PER_SECOND);\n      break;\n  }\n\n  this._d.setTime(time);\n\n  hooks.updateOffset(this, true);\n  return this;\n}\nexport function endOf(units) {\n  var time, startOfDate;\n  units = normalizeUnits(units);\n\n  if (units === undefined || units === 'millisecond' || !this.isValid()) {\n    return this;\n  }\n\n  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n  switch (units) {\n    case 'year':\n      time = startOfDate(this.year() + 1, 0, 1) - 1;\n      break;\n\n    case 'quarter':\n      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n      break;\n\n    case 'month':\n      time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n      break;\n\n    case 'week':\n      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n      break;\n\n    case 'isoWeek':\n      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n      break;\n\n    case 'day':\n    case 'date':\n      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n      break;\n\n    case 'hour':\n      time = this._d.valueOf();\n      time += MS_PER_HOUR - mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n      break;\n\n    case 'minute':\n      time = this._d.valueOf();\n      time += MS_PER_MINUTE - mod(time, MS_PER_MINUTE) - 1;\n      break;\n\n    case 'second':\n      time = this._d.valueOf();\n      time += MS_PER_SECOND - mod(time, MS_PER_SECOND) - 1;\n      break;\n  }\n\n  this._d.setTime(time);\n\n  hooks.updateOffset(this, true);\n  return this;\n}","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/moment/start-end-of.js"],"names":["normalizeUnits","hooks","MS_PER_SECOND","MS_PER_MINUTE","MS_PER_HOUR","MS_PER_400_YEARS","mod","dividend","divisor","localStartOfDate","y","m","d","Date","valueOf","utcStartOfDate","UTC","startOf","units","time","startOfDate","undefined","isValid","_isUTC","year","month","date","weekday","isoWeekday","_d","utcOffset","setTime","updateOffset","endOf"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,IAAIC,aAAa,GAAG,IAApB;AAAA,IACIC,aAAa,GAAG,KAAKD,aADzB;AAAA,IAEIE,WAAW,GAAG,KAAKD,aAFvB;AAAA,IAGIE,gBAAgB,GAAG,CAAC,MAAM,GAAN,GAAY,EAAb,IAAmB,EAAnB,GAAwBD,WAH/C,C,CAKA;;AACA,SAASE,GAAT,CAAaC,QAAb,EAAuBC,OAAvB,EAAgC;AAC5B,SAAO,CAAED,QAAQ,GAAGC,OAAZ,GAAuBA,OAAxB,IAAmCA,OAA1C;AACH;;AAED,SAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AAC/B;AACA,MAAIF,CAAC,GAAG,GAAJ,IAAWA,CAAC,IAAI,CAApB,EAAuB;AACnB;AACA,WAAO,IAAIG,IAAJ,CAASH,CAAC,GAAG,GAAb,EAAkBC,CAAlB,EAAqBC,CAArB,IAA0BP,gBAAjC;AACH,GAHD,MAGO;AACH,WAAO,IAAIQ,IAAJ,CAASH,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBE,OAAlB,EAAP;AACH;AACJ;;AAED,SAASC,cAAT,CAAwBL,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC;AAC7B;AACA,MAAIF,CAAC,GAAG,GAAJ,IAAWA,CAAC,IAAI,CAApB,EAAuB;AACnB;AACA,WAAOG,IAAI,CAACG,GAAL,CAASN,CAAC,GAAG,GAAb,EAAkBC,CAAlB,EAAqBC,CAArB,IAA0BP,gBAAjC;AACH,GAHD,MAGO;AACH,WAAOQ,IAAI,CAACG,GAAL,CAASN,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAP;AACH;AACJ;;AAED,OAAO,SAASK,OAAT,CAAiBC,KAAjB,EAAwB;AAC3B,MAAIC,IAAJ,EAAUC,WAAV;AACAF,EAAAA,KAAK,GAAGlB,cAAc,CAACkB,KAAD,CAAtB;;AACA,MAAIA,KAAK,KAAKG,SAAV,IAAuBH,KAAK,KAAK,aAAjC,IAAkD,CAAC,KAAKI,OAAL,EAAvD,EAAuE;AACnE,WAAO,IAAP;AACH;;AAEDF,EAAAA,WAAW,GAAG,KAAKG,MAAL,GAAcR,cAAd,GAA+BN,gBAA7C;;AAEA,UAAQS,KAAR;AACI,SAAK,MAAL;AACIC,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,EAAD,EAAc,CAAd,EAAiB,CAAjB,CAAlB;AACA;;AACJ,SAAK,SAAL;AACIL,MAAAA,IAAI,GAAGC,WAAW,CACd,KAAKI,IAAL,EADc,EAEd,KAAKC,KAAL,KAAgB,KAAKA,KAAL,KAAe,CAFjB,EAGd,CAHc,CAAlB;AAKA;;AACJ,SAAK,OAAL;AACIN,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,EAAD,EAAc,KAAKC,KAAL,EAAd,EAA4B,CAA5B,CAAlB;AACA;;AACJ,SAAK,MAAL;AACIN,MAAAA,IAAI,GAAGC,WAAW,CACd,KAAKI,IAAL,EADc,EAEd,KAAKC,KAAL,EAFc,EAGd,KAAKC,IAAL,KAAc,KAAKC,OAAL,EAHA,CAAlB;AAKA;;AACJ,SAAK,SAAL;AACIR,MAAAA,IAAI,GAAGC,WAAW,CACd,KAAKI,IAAL,EADc,EAEd,KAAKC,KAAL,EAFc,EAGd,KAAKC,IAAL,MAAe,KAAKE,UAAL,KAAoB,CAAnC,CAHc,CAAlB;AAKA;;AACJ,SAAK,KAAL;AACA,SAAK,MAAL;AACIT,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,EAAD,EAAc,KAAKC,KAAL,EAAd,EAA4B,KAAKC,IAAL,EAA5B,CAAlB;AACA;;AACJ,SAAK,MAAL;AACIP,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IAAIb,GAAG,CACPa,IAAI,IAAI,KAAKI,MAAL,GAAc,CAAd,GAAkB,KAAKO,SAAL,KAAmB3B,aAAzC,CADG,EAEPC,WAFO,CAAX;AAIA;;AACJ,SAAK,QAAL;AACIe,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IAAIb,GAAG,CAACa,IAAD,EAAOhB,aAAP,CAAX;AACA;;AACJ,SAAK,QAAL;AACIgB,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IAAIb,GAAG,CAACa,IAAD,EAAOjB,aAAP,CAAX;AACA;AA9CR;;AAiDA,OAAK2B,EAAL,CAAQE,OAAR,CAAgBZ,IAAhB;;AACAlB,EAAAA,KAAK,CAAC+B,YAAN,CAAmB,IAAnB,EAAyB,IAAzB;AACA,SAAO,IAAP;AACH;AAED,OAAO,SAASC,KAAT,CAAef,KAAf,EAAsB;AACzB,MAAIC,IAAJ,EAAUC,WAAV;AACAF,EAAAA,KAAK,GAAGlB,cAAc,CAACkB,KAAD,CAAtB;;AACA,MAAIA,KAAK,KAAKG,SAAV,IAAuBH,KAAK,KAAK,aAAjC,IAAkD,CAAC,KAAKI,OAAL,EAAvD,EAAuE;AACnE,WAAO,IAAP;AACH;;AAEDF,EAAAA,WAAW,GAAG,KAAKG,MAAL,GAAcR,cAAd,GAA+BN,gBAA7C;;AAEA,UAAQS,KAAR;AACI,SAAK,MAAL;AACIC,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,KAAc,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAX,GAAqC,CAA5C;AACA;;AACJ,SAAK,SAAL;AACIL,MAAAA,IAAI,GACAC,WAAW,CACP,KAAKI,IAAL,EADO,EAEP,KAAKC,KAAL,KAAgB,KAAKA,KAAL,KAAe,CAA/B,GAAoC,CAF7B,EAGP,CAHO,CAAX,GAII,CALR;AAMA;;AACJ,SAAK,OAAL;AACIN,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,EAAD,EAAc,KAAKC,KAAL,KAAe,CAA7B,EAAgC,CAAhC,CAAX,GAAgD,CAAvD;AACA;;AACJ,SAAK,MAAL;AACIN,MAAAA,IAAI,GACAC,WAAW,CACP,KAAKI,IAAL,EADO,EAEP,KAAKC,KAAL,EAFO,EAGP,KAAKC,IAAL,KAAc,KAAKC,OAAL,EAAd,GAA+B,CAHxB,CAAX,GAII,CALR;AAMA;;AACJ,SAAK,SAAL;AACIR,MAAAA,IAAI,GACAC,WAAW,CACP,KAAKI,IAAL,EADO,EAEP,KAAKC,KAAL,EAFO,EAGP,KAAKC,IAAL,MAAe,KAAKE,UAAL,KAAoB,CAAnC,IAAwC,CAHjC,CAAX,GAII,CALR;AAMA;;AACJ,SAAK,KAAL;AACA,SAAK,MAAL;AACIT,MAAAA,IAAI,GAAGC,WAAW,CAAC,KAAKI,IAAL,EAAD,EAAc,KAAKC,KAAL,EAAd,EAA4B,KAAKC,IAAL,KAAc,CAA1C,CAAX,GAA0D,CAAjE;AACA;;AACJ,SAAK,MAAL;AACIP,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IACAf,WAAW,GACXE,GAAG,CACCa,IAAI,IAAI,KAAKI,MAAL,GAAc,CAAd,GAAkB,KAAKO,SAAL,KAAmB3B,aAAzC,CADL,EAECC,WAFD,CADH,GAKA,CANJ;AAOA;;AACJ,SAAK,QAAL;AACIe,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IAAIhB,aAAa,GAAGG,GAAG,CAACa,IAAD,EAAOhB,aAAP,CAAnB,GAA2C,CAAnD;AACA;;AACJ,SAAK,QAAL;AACIgB,MAAAA,IAAI,GAAG,KAAKU,EAAL,CAAQf,OAAR,EAAP;AACAK,MAAAA,IAAI,IAAIjB,aAAa,GAAGI,GAAG,CAACa,IAAD,EAAOjB,aAAP,CAAnB,GAA2C,CAAnD;AACA;AApDR;;AAuDA,OAAK2B,EAAL,CAAQE,OAAR,CAAgBZ,IAAhB;;AACAlB,EAAAA,KAAK,CAAC+B,YAAN,CAAmB,IAAnB,EAAyB,IAAzB;AACA,SAAO,IAAP;AACH","sourcesContent":["import { normalizeUnits } from '../units/aliases';\nimport { hooks } from '../utils/hooks';\n\nvar MS_PER_SECOND = 1000,\n    MS_PER_MINUTE = 60 * MS_PER_SECOND,\n    MS_PER_HOUR = 60 * MS_PER_MINUTE,\n    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n// actual modulo - handles negative numbers (for dates before 1970):\nfunction mod(dividend, divisor) {\n    return ((dividend % divisor) + divisor) % divisor;\n}\n\nfunction localStartOfDate(y, m, d) {\n    // the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n        // preserve leap years using a full 400 year cycle, then reset\n        return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n        return new Date(y, m, d).valueOf();\n    }\n}\n\nfunction utcStartOfDate(y, m, d) {\n    // Date.UTC remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n        // preserve leap years using a full 400 year cycle, then reset\n        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n        return Date.UTC(y, m, d);\n    }\n}\n\nexport function startOf(units) {\n    var time, startOfDate;\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n        return this;\n    }\n\n    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n    switch (units) {\n        case 'year':\n            time = startOfDate(this.year(), 0, 1);\n            break;\n        case 'quarter':\n            time = startOfDate(\n                this.year(),\n                this.month() - (this.month() % 3),\n                1\n            );\n            break;\n        case 'month':\n            time = startOfDate(this.year(), this.month(), 1);\n            break;\n        case 'week':\n            time = startOfDate(\n                this.year(),\n                this.month(),\n                this.date() - this.weekday()\n            );\n            break;\n        case 'isoWeek':\n            time = startOfDate(\n                this.year(),\n                this.month(),\n                this.date() - (this.isoWeekday() - 1)\n            );\n            break;\n        case 'day':\n        case 'date':\n            time = startOfDate(this.year(), this.month(), this.date());\n            break;\n        case 'hour':\n            time = this._d.valueOf();\n            time -= mod(\n                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                MS_PER_HOUR\n            );\n            break;\n        case 'minute':\n            time = this._d.valueOf();\n            time -= mod(time, MS_PER_MINUTE);\n            break;\n        case 'second':\n            time = this._d.valueOf();\n            time -= mod(time, MS_PER_SECOND);\n            break;\n    }\n\n    this._d.setTime(time);\n    hooks.updateOffset(this, true);\n    return this;\n}\n\nexport function endOf(units) {\n    var time, startOfDate;\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n        return this;\n    }\n\n    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n    switch (units) {\n        case 'year':\n            time = startOfDate(this.year() + 1, 0, 1) - 1;\n            break;\n        case 'quarter':\n            time =\n                startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3) + 3,\n                    1\n                ) - 1;\n            break;\n        case 'month':\n            time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n            break;\n        case 'week':\n            time =\n                startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday() + 7\n                ) - 1;\n            break;\n        case 'isoWeek':\n            time =\n                startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1) + 7\n                ) - 1;\n            break;\n        case 'day':\n        case 'date':\n            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n            break;\n        case 'hour':\n            time = this._d.valueOf();\n            time +=\n                MS_PER_HOUR -\n                mod(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                ) -\n                1;\n            break;\n        case 'minute':\n            time = this._d.valueOf();\n            time += MS_PER_MINUTE - mod(time, MS_PER_MINUTE) - 1;\n            break;\n        case 'second':\n            time = this._d.valueOf();\n            time += MS_PER_SECOND - mod(time, MS_PER_SECOND) - 1;\n            break;\n    }\n\n    this._d.setTime(time);\n    hooks.updateOffset(this, true);\n    return this;\n}\n"]},"metadata":{},"sourceType":"module"}