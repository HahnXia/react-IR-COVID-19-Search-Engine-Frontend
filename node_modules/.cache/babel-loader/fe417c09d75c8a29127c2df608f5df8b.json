{"ast":null,"code":"import './prototype';\nimport { getSetGlobalLocale } from './locales';\nimport toInt from '../utils/to-int';\ngetSetGlobalLocale('en', {\n  eras: [{\n    since: '0001-01-01',\n    until: +Infinity,\n    offset: 1,\n    name: 'Anno Domini',\n    narrow: 'AD',\n    abbr: 'AD'\n  }, {\n    since: '0000-12-31',\n    until: -Infinity,\n    offset: 1,\n    name: 'Before Christ',\n    narrow: 'BC',\n    abbr: 'BC'\n  }],\n  dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n  ordinal: function (number) {\n    var b = number % 10,\n        output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    return number + output;\n  }\n});","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/locale/en.js"],"names":["getSetGlobalLocale","toInt","eras","since","until","Infinity","offset","name","narrow","abbr","dayOfMonthOrdinalParse","ordinal","number","b","output"],"mappings":"AAAA,OAAO,aAAP;AACA,SAASA,kBAAT,QAAmC,WAAnC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEAD,kBAAkB,CAAC,IAAD,EAAO;AACrBE,EAAAA,IAAI,EAAE,CACF;AACIC,IAAAA,KAAK,EAAE,YADX;AAEIC,IAAAA,KAAK,EAAE,CAACC,QAFZ;AAGIC,IAAAA,MAAM,EAAE,CAHZ;AAIIC,IAAAA,IAAI,EAAE,aAJV;AAKIC,IAAAA,MAAM,EAAE,IALZ;AAMIC,IAAAA,IAAI,EAAE;AANV,GADE,EASF;AACIN,IAAAA,KAAK,EAAE,YADX;AAEIC,IAAAA,KAAK,EAAE,CAACC,QAFZ;AAGIC,IAAAA,MAAM,EAAE,CAHZ;AAIIC,IAAAA,IAAI,EAAE,eAJV;AAKIC,IAAAA,MAAM,EAAE,IALZ;AAMIC,IAAAA,IAAI,EAAE;AANV,GATE,CADe;AAmBrBC,EAAAA,sBAAsB,EAAE,sBAnBH;AAoBrBC,EAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkB;AACvB,QAAIC,CAAC,GAAGD,MAAM,GAAG,EAAjB;AAAA,QACIE,MAAM,GACFb,KAAK,CAAEW,MAAM,GAAG,GAAV,GAAiB,EAAlB,CAAL,KAA+B,CAA/B,GACM,IADN,GAEMC,CAAC,KAAK,CAAN,GACA,IADA,GAEAA,CAAC,KAAK,CAAN,GACA,IADA,GAEAA,CAAC,KAAK,CAAN,GACA,IADA,GAEA,IAVd;AAWA,WAAOD,MAAM,GAAGE,MAAhB;AACH;AAjCoB,CAAP,CAAlB","sourcesContent":["import './prototype';\nimport { getSetGlobalLocale } from './locales';\nimport toInt from '../utils/to-int';\n\ngetSetGlobalLocale('en', {\n    eras: [\n        {\n            since: '0001-01-01',\n            until: +Infinity,\n            offset: 1,\n            name: 'Anno Domini',\n            narrow: 'AD',\n            abbr: 'AD',\n        },\n        {\n            since: '0000-12-31',\n            until: -Infinity,\n            offset: 1,\n            name: 'Before Christ',\n            narrow: 'BC',\n            abbr: 'BC',\n        },\n    ],\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n    ordinal: function (number) {\n        var b = number % 10,\n            output =\n                toInt((number % 100) / 10) === 1\n                    ? 'th'\n                    : b === 1\n                    ? 'st'\n                    : b === 2\n                    ? 'nd'\n                    : b === 3\n                    ? 'rd'\n                    : 'th';\n        return number + output;\n    },\n});\n"]},"metadata":{},"sourceType":"module"}