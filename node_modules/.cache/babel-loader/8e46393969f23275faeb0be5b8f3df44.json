{"ast":null,"code":"import { addFormatToken } from '../format/format';\nimport { addRegexToken, matchTimestamp, matchSigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport toInt from '../utils/to-int'; // FORMATTING\n\naddFormatToken('X', 0, 0, 'unix');\naddFormatToken('x', 0, 0, 'valueOf'); // PARSING\n\naddRegexToken('x', matchSigned);\naddRegexToken('X', matchTimestamp);\naddParseToken('X', function (input, array, config) {\n  config._d = new Date(parseFloat(input) * 1000);\n});\naddParseToken('x', function (input, array, config) {\n  config._d = new Date(toInt(input));\n});","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/units/timestamp.js"],"names":["addFormatToken","addRegexToken","matchTimestamp","matchSigned","addParseToken","toInt","input","array","config","_d","Date","parseFloat"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,WAAxC,QAA2D,gBAA3D;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;AAEAL,cAAc,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,MAAZ,CAAd;AACAA,cAAc,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,SAAZ,CAAd,C,CAEA;;AAEAC,aAAa,CAAC,GAAD,EAAME,WAAN,CAAb;AACAF,aAAa,CAAC,GAAD,EAAMC,cAAN,CAAb;AACAE,aAAa,CAAC,GAAD,EAAM,UAAUE,KAAV,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC/CA,EAAAA,MAAM,CAACC,EAAP,GAAY,IAAIC,IAAJ,CAASC,UAAU,CAACL,KAAD,CAAV,GAAoB,IAA7B,CAAZ;AACH,CAFY,CAAb;AAGAF,aAAa,CAAC,GAAD,EAAM,UAAUE,KAAV,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC/CA,EAAAA,MAAM,CAACC,EAAP,GAAY,IAAIC,IAAJ,CAASL,KAAK,CAACC,KAAD,CAAd,CAAZ;AACH,CAFY,CAAb","sourcesContent":["import { addFormatToken } from '../format/format';\nimport { addRegexToken, matchTimestamp, matchSigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('X', 0, 0, 'unix');\naddFormatToken('x', 0, 0, 'valueOf');\n\n// PARSING\n\naddRegexToken('x', matchSigned);\naddRegexToken('X', matchTimestamp);\naddParseToken('X', function (input, array, config) {\n    config._d = new Date(parseFloat(input) * 1000);\n});\naddParseToken('x', function (input, array, config) {\n    config._d = new Date(toInt(input));\n});\n"]},"metadata":{},"sourceType":"module"}