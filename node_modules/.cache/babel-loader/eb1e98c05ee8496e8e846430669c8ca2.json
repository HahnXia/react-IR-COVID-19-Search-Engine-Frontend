{"ast":null,"code":"import { createLocal } from '../create/local';\nimport { cloneWithOffset } from '../units/offset';\nimport isFunction from '../utils/is-function';\nimport { hooks } from '../utils/hooks';\nimport { isMomentInput } from '../utils/is-moment-input';\nimport isCalendarSpec from '../utils/is-calendar-spec';\nexport function getCalendarFormat(myMoment, now) {\n  var diff = myMoment.diff(now, 'days', true);\n  return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';\n}\nexport function calendar(time, formats) {\n  // Support for single parameter, formats only overload to the calendar function\n  if (arguments.length === 1) {\n    if (isMomentInput(arguments[0])) {\n      time = arguments[0];\n      formats = undefined;\n    } else if (isCalendarSpec(arguments[0])) {\n      formats = arguments[0];\n      time = undefined;\n    }\n  } // We want to compare the start of today, vs this.\n  // Getting start-of-today depends on whether we're local/utc/offset or not.\n\n\n  var now = time || createLocal(),\n      sod = cloneWithOffset(now, this).startOf('day'),\n      format = hooks.calendarFormat(this, sod) || 'sameElse',\n      output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n  return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n}","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/moment/calendar.js"],"names":["createLocal","cloneWithOffset","isFunction","hooks","isMomentInput","isCalendarSpec","getCalendarFormat","myMoment","now","diff","calendar","time","formats","arguments","length","undefined","sod","startOf","format","calendarFormat","output","call","localeData"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,GAArC,EAA0C;AAC7C,MAAIC,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcD,GAAd,EAAmB,MAAnB,EAA2B,IAA3B,CAAX;AACA,SAAOC,IAAI,GAAG,CAAC,CAAR,GACD,UADC,GAEDA,IAAI,GAAG,CAAC,CAAR,GACA,UADA,GAEAA,IAAI,GAAG,CAAP,GACA,SADA,GAEAA,IAAI,GAAG,CAAP,GACA,SADA,GAEAA,IAAI,GAAG,CAAP,GACA,SADA,GAEAA,IAAI,GAAG,CAAP,GACA,UADA,GAEA,UAZN;AAaH;AAED,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AACpC;AACA,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,QAAIV,aAAa,CAACS,SAAS,CAAC,CAAD,CAAV,CAAjB,EAAiC;AAC7BF,MAAAA,IAAI,GAAGE,SAAS,CAAC,CAAD,CAAhB;AACAD,MAAAA,OAAO,GAAGG,SAAV;AACH,KAHD,MAGO,IAAIV,cAAc,CAACQ,SAAS,CAAC,CAAD,CAAV,CAAlB,EAAkC;AACrCD,MAAAA,OAAO,GAAGC,SAAS,CAAC,CAAD,CAAnB;AACAF,MAAAA,IAAI,GAAGI,SAAP;AACH;AACJ,GAVmC,CAWpC;AACA;;;AACA,MAAIP,GAAG,GAAGG,IAAI,IAAIX,WAAW,EAA7B;AAAA,MACIgB,GAAG,GAAGf,eAAe,CAACO,GAAD,EAAM,IAAN,CAAf,CAA2BS,OAA3B,CAAmC,KAAnC,CADV;AAAA,MAEIC,MAAM,GAAGf,KAAK,CAACgB,cAAN,CAAqB,IAArB,EAA2BH,GAA3B,KAAmC,UAFhD;AAAA,MAGII,MAAM,GACFR,OAAO,KACNV,UAAU,CAACU,OAAO,CAACM,MAAD,CAAR,CAAV,GACKN,OAAO,CAACM,MAAD,CAAP,CAAgBG,IAAhB,CAAqB,IAArB,EAA2Bb,GAA3B,CADL,GAEKI,OAAO,CAACM,MAAD,CAHN,CAJf;AASA,SAAO,KAAKA,MAAL,CACHE,MAAM,IAAI,KAAKE,UAAL,GAAkBZ,QAAlB,CAA2BQ,MAA3B,EAAmC,IAAnC,EAAyClB,WAAW,CAACQ,GAAD,CAApD,CADP,CAAP;AAGH","sourcesContent":["import { createLocal } from '../create/local';\nimport { cloneWithOffset } from '../units/offset';\nimport isFunction from '../utils/is-function';\nimport { hooks } from '../utils/hooks';\nimport { isMomentInput } from '../utils/is-moment-input';\nimport isCalendarSpec from '../utils/is-calendar-spec';\n\nexport function getCalendarFormat(myMoment, now) {\n    var diff = myMoment.diff(now, 'days', true);\n    return diff < -6\n        ? 'sameElse'\n        : diff < -1\n        ? 'lastWeek'\n        : diff < 0\n        ? 'lastDay'\n        : diff < 1\n        ? 'sameDay'\n        : diff < 2\n        ? 'nextDay'\n        : diff < 7\n        ? 'nextWeek'\n        : 'sameElse';\n}\n\nexport function calendar(time, formats) {\n    // Support for single parameter, formats only overload to the calendar function\n    if (arguments.length === 1) {\n        if (isMomentInput(arguments[0])) {\n            time = arguments[0];\n            formats = undefined;\n        } else if (isCalendarSpec(arguments[0])) {\n            formats = arguments[0];\n            time = undefined;\n        }\n    }\n    // We want to compare the start of today, vs this.\n    // Getting start-of-today depends on whether we're local/utc/offset or not.\n    var now = time || createLocal(),\n        sod = cloneWithOffset(now, this).startOf('day'),\n        format = hooks.calendarFormat(this, sod) || 'sameElse',\n        output =\n            formats &&\n            (isFunction(formats[format])\n                ? formats[format].call(this, now)\n                : formats[format]);\n\n    return this.format(\n        output || this.localeData().calendar(format, this, createLocal(now))\n    );\n}\n"]},"metadata":{},"sourceType":"module"}