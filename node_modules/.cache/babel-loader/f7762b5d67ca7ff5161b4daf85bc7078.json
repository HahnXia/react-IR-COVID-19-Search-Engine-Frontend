{"ast":null,"code":"import { configFromStringAndFormat } from './from-string-and-format';\nimport { createUTCDate } from './date-from-array';\nimport { hooks } from '../utils/hooks';\nimport { deprecate } from '../utils/deprecate';\nimport getParsingFlags from './parsing-flags';\nimport { defaultLocaleMonthsShort } from '../units/month';\nimport { defaultLocaleWeekdaysShort } from '../units/day-of-week'; // iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n    isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/], ['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/], ['YYYYMM', /\\d{6}/, false], ['YYYY', /\\d{4}/, false]],\n    // iso time formats and regexes\nisoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]],\n    aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\nrfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n    obsOffsets = {\n  UT: 0,\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n}; // date from iso format\n\nexport function configFromISO(config) {\n  var i,\n      l,\n      string = config._i,\n      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n      allowTime,\n      dateFormat,\n      timeFormat,\n      tzFormat;\n\n  if (match) {\n    getParsingFlags(config).iso = true;\n\n    for (i = 0, l = isoDates.length; i < l; i++) {\n      if (isoDates[i][1].exec(match[1])) {\n        dateFormat = isoDates[i][0];\n        allowTime = isoDates[i][2] !== false;\n        break;\n      }\n    }\n\n    if (dateFormat == null) {\n      config._isValid = false;\n      return;\n    }\n\n    if (match[3]) {\n      for (i = 0, l = isoTimes.length; i < l; i++) {\n        if (isoTimes[i][1].exec(match[3])) {\n          // match[2] should be 'T' or space\n          timeFormat = (match[2] || ' ') + isoTimes[i][0];\n          break;\n        }\n      }\n\n      if (timeFormat == null) {\n        config._isValid = false;\n        return;\n      }\n    }\n\n    if (!allowTime && timeFormat != null) {\n      config._isValid = false;\n      return;\n    }\n\n    if (match[4]) {\n      if (tzRegex.exec(match[4])) {\n        tzFormat = 'Z';\n      } else {\n        config._isValid = false;\n        return;\n      }\n    }\n\n    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n    configFromStringAndFormat(config);\n  } else {\n    config._isValid = false;\n  }\n}\n\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];\n\n  if (secondStr) {\n    result.push(parseInt(secondStr, 10));\n  }\n\n  return result;\n}\n\nfunction untruncateYear(yearStr) {\n  var year = parseInt(yearStr, 10);\n\n  if (year <= 49) {\n    return 2000 + year;\n  } else if (year <= 999) {\n    return 1900 + year;\n  }\n\n  return year;\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n}\n\nfunction checkWeekday(weekdayStr, parsedInput, config) {\n  if (weekdayStr) {\n    // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n\n    if (weekdayProvided !== weekdayActual) {\n      getParsingFlags(config).weekdayMismatch = true;\n      config._isValid = false;\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\n  if (obsOffset) {\n    return obsOffsets[obsOffset];\n  } else if (militaryOffset) {\n    // the only allowed military tz is Z\n    return 0;\n  } else {\n    var hm = parseInt(numOffset, 10),\n        m = hm % 100,\n        h = (hm - m) / 100;\n    return h * 60 + m;\n  }\n} // date and time from ref 2822 format\n\n\nexport function configFromRFC2822(config) {\n  var match = rfc2822.exec(preprocessRFC2822(config._i)),\n      parsedArray;\n\n  if (match) {\n    parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n\n    if (!checkWeekday(match[1], parsedArray, config)) {\n      return;\n    }\n\n    config._a = parsedArray;\n    config._tzm = calculateOffset(match[8], match[9], match[10]);\n    config._d = createUTCDate.apply(null, config._a);\n\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n    getParsingFlags(config).rfc2822 = true;\n  } else {\n    config._isValid = false;\n  }\n} // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n\nexport function configFromString(config) {\n  var matched = aspNetJsonRegex.exec(config._i);\n\n  if (matched !== null) {\n    config._d = new Date(+matched[1]);\n    return;\n  }\n\n  configFromISO(config);\n\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  configFromRFC2822(config);\n\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  if (config._strict) {\n    config._isValid = false;\n  } else {\n    // Final attempt, use Input Fallback\n    hooks.createFromInputFallback(config);\n  }\n}\nhooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n  config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n});","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/create/from-string.js"],"names":["configFromStringAndFormat","createUTCDate","hooks","deprecate","getParsingFlags","defaultLocaleMonthsShort","defaultLocaleWeekdaysShort","extendedIsoRegex","basicIsoRegex","tzRegex","isoDates","isoTimes","aspNetJsonRegex","rfc2822","obsOffsets","UT","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","configFromISO","config","i","l","string","_i","match","exec","allowTime","dateFormat","timeFormat","tzFormat","iso","length","_isValid","_f","extractFromRFC2822Strings","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","result","untruncateYear","indexOf","parseInt","push","year","preprocessRFC2822","s","replace","checkWeekday","weekdayStr","parsedInput","weekdayProvided","weekdayActual","Date","getDay","weekdayMismatch","calculateOffset","obsOffset","militaryOffset","numOffset","hm","m","h","configFromRFC2822","parsedArray","_a","_tzm","_d","apply","setUTCMinutes","getUTCMinutes","configFromString","matched","_strict","createFromInputFallback","_useUTC"],"mappings":"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","sourcesContent":["import { configFromStringAndFormat } from './from-string-and-format';\nimport { createUTCDate } from './date-from-array';\nimport { hooks } from '../utils/hooks';\nimport { deprecate } from '../utils/deprecate';\nimport getParsingFlags from './parsing-flags';\nimport { defaultLocaleMonthsShort } from '../units/month';\nimport { defaultLocaleWeekdaysShort } from '../units/day-of-week';\n\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n    isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/],\n        ['YYYYMM', /\\d{6}/, false],\n        ['YYYY', /\\d{4}/, false],\n    ],\n    // iso time formats and regexes\n    isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/],\n    ],\n    aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n    obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60,\n    };\n\n// date from iso format\nexport function configFromISO(config) {\n    var i,\n        l,\n        string = config._i,\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n        allowTime,\n        dateFormat,\n        timeFormat,\n        tzFormat;\n\n    if (match) {\n        getParsingFlags(config).iso = true;\n\n        for (i = 0, l = isoDates.length; i < l; i++) {\n            if (isoDates[i][1].exec(match[1])) {\n                dateFormat = isoDates[i][0];\n                allowTime = isoDates[i][2] !== false;\n                break;\n            }\n        }\n        if (dateFormat == null) {\n            config._isValid = false;\n            return;\n        }\n        if (match[3]) {\n            for (i = 0, l = isoTimes.length; i < l; i++) {\n                if (isoTimes[i][1].exec(match[3])) {\n                    // match[2] should be 'T' or space\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                    break;\n                }\n            }\n            if (timeFormat == null) {\n                config._isValid = false;\n                return;\n            }\n        }\n        if (!allowTime && timeFormat != null) {\n            config._isValid = false;\n            return;\n        }\n        if (match[4]) {\n            if (tzRegex.exec(match[4])) {\n                tzFormat = 'Z';\n            } else {\n                config._isValid = false;\n                return;\n            }\n        }\n        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n        configFromStringAndFormat(config);\n    } else {\n        config._isValid = false;\n    }\n}\n\nfunction extractFromRFC2822Strings(\n    yearStr,\n    monthStr,\n    dayStr,\n    hourStr,\n    minuteStr,\n    secondStr\n) {\n    var result = [\n        untruncateYear(yearStr),\n        defaultLocaleMonthsShort.indexOf(monthStr),\n        parseInt(dayStr, 10),\n        parseInt(hourStr, 10),\n        parseInt(minuteStr, 10),\n    ];\n\n    if (secondStr) {\n        result.push(parseInt(secondStr, 10));\n    }\n\n    return result;\n}\n\nfunction untruncateYear(yearStr) {\n    var year = parseInt(yearStr, 10);\n    if (year <= 49) {\n        return 2000 + year;\n    } else if (year <= 999) {\n        return 1900 + year;\n    }\n    return year;\n}\n\nfunction preprocessRFC2822(s) {\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\n    return s\n        .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n        .replace(/(\\s\\s+)/g, ' ')\n        .replace(/^\\s\\s*/, '')\n        .replace(/\\s\\s*$/, '');\n}\n\nfunction checkWeekday(weekdayStr, parsedInput, config) {\n    if (weekdayStr) {\n        // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n            weekdayActual = new Date(\n                parsedInput[0],\n                parsedInput[1],\n                parsedInput[2]\n            ).getDay();\n        if (weekdayProvided !== weekdayActual) {\n            getParsingFlags(config).weekdayMismatch = true;\n            config._isValid = false;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\n    if (obsOffset) {\n        return obsOffsets[obsOffset];\n    } else if (militaryOffset) {\n        // the only allowed military tz is Z\n        return 0;\n    } else {\n        var hm = parseInt(numOffset, 10),\n            m = hm % 100,\n            h = (hm - m) / 100;\n        return h * 60 + m;\n    }\n}\n\n// date and time from ref 2822 format\nexport function configFromRFC2822(config) {\n    var match = rfc2822.exec(preprocessRFC2822(config._i)),\n        parsedArray;\n    if (match) {\n        parsedArray = extractFromRFC2822Strings(\n            match[4],\n            match[3],\n            match[2],\n            match[5],\n            match[6],\n            match[7]\n        );\n        if (!checkWeekday(match[1], parsedArray, config)) {\n            return;\n        }\n\n        config._a = parsedArray;\n        config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n        config._d = createUTCDate.apply(null, config._a);\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n        getParsingFlags(config).rfc2822 = true;\n    } else {\n        config._isValid = false;\n    }\n}\n\n// date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\nexport function configFromString(config) {\n    var matched = aspNetJsonRegex.exec(config._i);\n    if (matched !== null) {\n        config._d = new Date(+matched[1]);\n        return;\n    }\n\n    configFromISO(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n    } else {\n        return;\n    }\n\n    configFromRFC2822(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n    } else {\n        return;\n    }\n\n    if (config._strict) {\n        config._isValid = false;\n    } else {\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n}\n\nhooks.createFromInputFallback = deprecate(\n    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n    function (config) {\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n    }\n);\n"]},"metadata":{},"sourceType":"module"}