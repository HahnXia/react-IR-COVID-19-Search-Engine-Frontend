{"ast":null,"code":"import { get, set } from './get-set';\nimport { setMonth } from '../units/month';\nimport { createDuration } from '../duration/create';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { hooks } from '../utils/hooks';\nimport absRound from '../utils/abs-round'; // TODO: remove 'name' arg after deprecation is removed\n\nfunction createAdder(direction, name) {\n  return function (val, period) {\n    var dur, tmp; //invert the arguments, but complain about it\n\n    if (period !== null && !isNaN(+period)) {\n      deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n      tmp = val;\n      val = period;\n      period = tmp;\n    }\n\n    dur = createDuration(val, period);\n    addSubtract(this, dur, direction);\n    return this;\n  };\n}\n\nexport function addSubtract(mom, duration, isAdding, updateOffset) {\n  var milliseconds = duration._milliseconds,\n      days = absRound(duration._days),\n      months = absRound(duration._months);\n\n  if (!mom.isValid()) {\n    // No op\n    return;\n  }\n\n  updateOffset = updateOffset == null ? true : updateOffset;\n\n  if (months) {\n    setMonth(mom, get(mom, 'Month') + months * isAdding);\n  }\n\n  if (days) {\n    set(mom, 'Date', get(mom, 'Date') + days * isAdding);\n  }\n\n  if (milliseconds) {\n    mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n  }\n\n  if (updateOffset) {\n    hooks.updateOffset(mom, days || months);\n  }\n}\nexport var add = createAdder(1, 'add'),\n    subtract = createAdder(-1, 'subtract');","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/moment/add-subtract.js"],"names":["get","set","setMonth","createDuration","deprecateSimple","hooks","absRound","createAdder","direction","name","val","period","dur","tmp","isNaN","addSubtract","mom","duration","isAdding","updateOffset","milliseconds","_milliseconds","days","_days","months","_months","isValid","_d","setTime","valueOf","add","subtract"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,WAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,oBAArB,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,IAAhC,EAAsC;AAClC,SAAO,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC1B,QAAIC,GAAJ,EAASC,GAAT,CAD0B,CAE1B;;AACA,QAAIF,MAAM,KAAK,IAAX,IAAmB,CAACG,KAAK,CAAC,CAACH,MAAF,CAA7B,EAAwC;AACpCP,MAAAA,eAAe,CACXK,IADW,EAEX,cACIA,IADJ,GAEI,sDAFJ,GAGIA,IAHJ,GAII,oBAJJ,GAKI,8EAPO,CAAf;AASAI,MAAAA,GAAG,GAAGH,GAAN;AACAA,MAAAA,GAAG,GAAGC,MAAN;AACAA,MAAAA,MAAM,GAAGE,GAAT;AACH;;AAEDD,IAAAA,GAAG,GAAGT,cAAc,CAACO,GAAD,EAAMC,MAAN,CAApB;AACAI,IAAAA,WAAW,CAAC,IAAD,EAAOH,GAAP,EAAYJ,SAAZ,CAAX;AACA,WAAO,IAAP;AACH,GArBD;AAsBH;;AAED,OAAO,SAASO,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8CC,YAA9C,EAA4D;AAC/D,MAAIC,YAAY,GAAGH,QAAQ,CAACI,aAA5B;AAAA,MACIC,IAAI,GAAGhB,QAAQ,CAACW,QAAQ,CAACM,KAAV,CADnB;AAAA,MAEIC,MAAM,GAAGlB,QAAQ,CAACW,QAAQ,CAACQ,OAAV,CAFrB;;AAIA,MAAI,CAACT,GAAG,CAACU,OAAJ,EAAL,EAAoB;AAChB;AACA;AACH;;AAEDP,EAAAA,YAAY,GAAGA,YAAY,IAAI,IAAhB,GAAuB,IAAvB,GAA8BA,YAA7C;;AAEA,MAAIK,MAAJ,EAAY;AACRtB,IAAAA,QAAQ,CAACc,GAAD,EAAMhB,GAAG,CAACgB,GAAD,EAAM,OAAN,CAAH,GAAoBQ,MAAM,GAAGN,QAAnC,CAAR;AACH;;AACD,MAAII,IAAJ,EAAU;AACNrB,IAAAA,GAAG,CAACe,GAAD,EAAM,MAAN,EAAchB,GAAG,CAACgB,GAAD,EAAM,MAAN,CAAH,GAAmBM,IAAI,GAAGJ,QAAxC,CAAH;AACH;;AACD,MAAIE,YAAJ,EAAkB;AACdJ,IAAAA,GAAG,CAACW,EAAJ,CAAOC,OAAP,CAAeZ,GAAG,CAACW,EAAJ,CAAOE,OAAP,KAAmBT,YAAY,GAAGF,QAAjD;AACH;;AACD,MAAIC,YAAJ,EAAkB;AACdd,IAAAA,KAAK,CAACc,YAAN,CAAmBH,GAAnB,EAAwBM,IAAI,IAAIE,MAAhC;AACH;AACJ;AAED,OAAO,IAAIM,GAAG,GAAGvB,WAAW,CAAC,CAAD,EAAI,KAAJ,CAArB;AAAA,IACHwB,QAAQ,GAAGxB,WAAW,CAAC,CAAC,CAAF,EAAK,UAAL,CADnB","sourcesContent":["import { get, set } from './get-set';\nimport { setMonth } from '../units/month';\nimport { createDuration } from '../duration/create';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { hooks } from '../utils/hooks';\nimport absRound from '../utils/abs-round';\n\n// TODO: remove 'name' arg after deprecation is removed\nfunction createAdder(direction, name) {\n    return function (val, period) {\n        var dur, tmp;\n        //invert the arguments, but complain about it\n        if (period !== null && !isNaN(+period)) {\n            deprecateSimple(\n                name,\n                'moment().' +\n                    name +\n                    '(period, number) is deprecated. Please use moment().' +\n                    name +\n                    '(number, period). ' +\n                    'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n            );\n            tmp = val;\n            val = period;\n            period = tmp;\n        }\n\n        dur = createDuration(val, period);\n        addSubtract(this, dur, direction);\n        return this;\n    };\n}\n\nexport function addSubtract(mom, duration, isAdding, updateOffset) {\n    var milliseconds = duration._milliseconds,\n        days = absRound(duration._days),\n        months = absRound(duration._months);\n\n    if (!mom.isValid()) {\n        // No op\n        return;\n    }\n\n    updateOffset = updateOffset == null ? true : updateOffset;\n\n    if (months) {\n        setMonth(mom, get(mom, 'Month') + months * isAdding);\n    }\n    if (days) {\n        set(mom, 'Date', get(mom, 'Date') + days * isAdding);\n    }\n    if (milliseconds) {\n        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n    }\n    if (updateOffset) {\n        hooks.updateOffset(mom, days || months);\n    }\n}\n\nexport var add = createAdder(1, 'add'),\n    subtract = createAdder(-1, 'subtract');\n"]},"metadata":{},"sourceType":"module"}