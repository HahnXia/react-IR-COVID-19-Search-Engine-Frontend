{"ast":null,"code":"import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { addRegexToken, match1, match2, match3, match1to3, matchUnsigned } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { MILLISECOND } from './constants';\nimport toInt from '../utils/to-int'; // FORMATTING\n\naddFormatToken('S', 0, 0, function () {\n  return ~~(this.millisecond() / 100);\n});\naddFormatToken(0, ['SS', 2], 0, function () {\n  return ~~(this.millisecond() / 10);\n});\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');\naddFormatToken(0, ['SSSS', 4], 0, function () {\n  return this.millisecond() * 10;\n});\naddFormatToken(0, ['SSSSS', 5], 0, function () {\n  return this.millisecond() * 100;\n});\naddFormatToken(0, ['SSSSSS', 6], 0, function () {\n  return this.millisecond() * 1000;\n});\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {\n  return this.millisecond() * 10000;\n});\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n  return this.millisecond() * 100000;\n});\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n  return this.millisecond() * 1000000;\n}); // ALIASES\n\naddUnitAlias('millisecond', 'ms'); // PRIORITY\n\naddUnitPriority('millisecond', 16); // PARSING\n\naddRegexToken('S', match1to3, match1);\naddRegexToken('SS', match1to3, match2);\naddRegexToken('SSS', match1to3, match3);\nvar token, getSetMillisecond;\n\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {\n  addRegexToken(token, matchUnsigned);\n}\n\nfunction parseMs(input, array) {\n  array[MILLISECOND] = toInt(('0.' + input) * 1000);\n}\n\nfor (token = 'S'; token.length <= 9; token += 'S') {\n  addParseToken(token, parseMs);\n}\n\ngetSetMillisecond = makeGetSet('Milliseconds', false);\nexport { getSetMillisecond };","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/units/millisecond.js"],"names":["makeGetSet","addFormatToken","addUnitAlias","addUnitPriority","addRegexToken","match1","match2","match3","match1to3","matchUnsigned","addParseToken","MILLISECOND","toInt","millisecond","token","getSetMillisecond","length","parseMs","input","array"],"mappings":"AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SACIC,aADJ,EAEIC,MAFJ,EAGIC,MAHJ,EAIIC,MAJJ,EAKIC,SALJ,EAMIC,aANJ,QAOO,gBAPP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;AAEAX,cAAc,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,YAAY;AAClC,SAAO,CAAC,EAAE,KAAKY,WAAL,KAAqB,GAAvB,CAAR;AACH,CAFa,CAAd;AAIAZ,cAAc,CAAC,CAAD,EAAI,CAAC,IAAD,EAAO,CAAP,CAAJ,EAAe,CAAf,EAAkB,YAAY;AACxC,SAAO,CAAC,EAAE,KAAKY,WAAL,KAAqB,EAAvB,CAAR;AACH,CAFa,CAAd;AAIAZ,cAAc,CAAC,CAAD,EAAI,CAAC,KAAD,EAAQ,CAAR,CAAJ,EAAgB,CAAhB,EAAmB,aAAnB,CAAd;AACAA,cAAc,CAAC,CAAD,EAAI,CAAC,MAAD,EAAS,CAAT,CAAJ,EAAiB,CAAjB,EAAoB,YAAY;AAC1C,SAAO,KAAKY,WAAL,KAAqB,EAA5B;AACH,CAFa,CAAd;AAGAZ,cAAc,CAAC,CAAD,EAAI,CAAC,OAAD,EAAU,CAAV,CAAJ,EAAkB,CAAlB,EAAqB,YAAY;AAC3C,SAAO,KAAKY,WAAL,KAAqB,GAA5B;AACH,CAFa,CAAd;AAGAZ,cAAc,CAAC,CAAD,EAAI,CAAC,QAAD,EAAW,CAAX,CAAJ,EAAmB,CAAnB,EAAsB,YAAY;AAC5C,SAAO,KAAKY,WAAL,KAAqB,IAA5B;AACH,CAFa,CAAd;AAGAZ,cAAc,CAAC,CAAD,EAAI,CAAC,SAAD,EAAY,CAAZ,CAAJ,EAAoB,CAApB,EAAuB,YAAY;AAC7C,SAAO,KAAKY,WAAL,KAAqB,KAA5B;AACH,CAFa,CAAd;AAGAZ,cAAc,CAAC,CAAD,EAAI,CAAC,UAAD,EAAa,CAAb,CAAJ,EAAqB,CAArB,EAAwB,YAAY;AAC9C,SAAO,KAAKY,WAAL,KAAqB,MAA5B;AACH,CAFa,CAAd;AAGAZ,cAAc,CAAC,CAAD,EAAI,CAAC,WAAD,EAAc,CAAd,CAAJ,EAAsB,CAAtB,EAAyB,YAAY;AAC/C,SAAO,KAAKY,WAAL,KAAqB,OAA5B;AACH,CAFa,CAAd,C,CAIA;;AAEAX,YAAY,CAAC,aAAD,EAAgB,IAAhB,CAAZ,C,CAEA;;AAEAC,eAAe,CAAC,aAAD,EAAgB,EAAhB,CAAf,C,CAEA;;AAEAC,aAAa,CAAC,GAAD,EAAMI,SAAN,EAAiBH,MAAjB,CAAb;AACAD,aAAa,CAAC,IAAD,EAAOI,SAAP,EAAkBF,MAAlB,CAAb;AACAF,aAAa,CAAC,KAAD,EAAQI,SAAR,EAAmBD,MAAnB,CAAb;AAEA,IAAIO,KAAJ,EAAWC,iBAAX;;AACA,KAAKD,KAAK,GAAG,MAAb,EAAqBA,KAAK,CAACE,MAAN,IAAgB,CAArC,EAAwCF,KAAK,IAAI,GAAjD,EAAsD;AAClDV,EAAAA,aAAa,CAACU,KAAD,EAAQL,aAAR,CAAb;AACH;;AAED,SAASQ,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC3BA,EAAAA,KAAK,CAACR,WAAD,CAAL,GAAqBC,KAAK,CAAC,CAAC,OAAOM,KAAR,IAAiB,IAAlB,CAA1B;AACH;;AAED,KAAKJ,KAAK,GAAG,GAAb,EAAkBA,KAAK,CAACE,MAAN,IAAgB,CAAlC,EAAqCF,KAAK,IAAI,GAA9C,EAAmD;AAC/CJ,EAAAA,aAAa,CAACI,KAAD,EAAQG,OAAR,CAAb;AACH;;AAEDF,iBAAiB,GAAGf,UAAU,CAAC,cAAD,EAAiB,KAAjB,CAA9B;AAEA,SAASe,iBAAT","sourcesContent":["import { makeGetSet } from '../moment/get-set';\nimport { addFormatToken } from '../format/format';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport {\n    addRegexToken,\n    match1,\n    match2,\n    match3,\n    match1to3,\n    matchUnsigned,\n} from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { MILLISECOND } from './constants';\nimport toInt from '../utils/to-int';\n\n// FORMATTING\n\naddFormatToken('S', 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n});\n\naddFormatToken(0, ['SS', 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n});\n\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');\naddFormatToken(0, ['SSSS', 4], 0, function () {\n    return this.millisecond() * 10;\n});\naddFormatToken(0, ['SSSSS', 5], 0, function () {\n    return this.millisecond() * 100;\n});\naddFormatToken(0, ['SSSSSS', 6], 0, function () {\n    return this.millisecond() * 1000;\n});\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {\n    return this.millisecond() * 10000;\n});\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n    return this.millisecond() * 100000;\n});\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n    return this.millisecond() * 1000000;\n});\n\n// ALIASES\n\naddUnitAlias('millisecond', 'ms');\n\n// PRIORITY\n\naddUnitPriority('millisecond', 16);\n\n// PARSING\n\naddRegexToken('S', match1to3, match1);\naddRegexToken('SS', match1to3, match2);\naddRegexToken('SSS', match1to3, match3);\n\nvar token, getSetMillisecond;\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n}\n\nfunction parseMs(input, array) {\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);\n}\n\nfor (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n}\n\ngetSetMillisecond = makeGetSet('Milliseconds', false);\n\nexport { getSetMillisecond };\n"]},"metadata":{},"sourceType":"module"}