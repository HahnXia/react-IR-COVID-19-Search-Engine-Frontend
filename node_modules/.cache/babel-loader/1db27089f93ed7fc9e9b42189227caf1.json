{"ast":null,"code":"import { formatMoment } from '../format/format';\nimport { hooks } from '../utils/hooks';\nimport isFunction from '../utils/is-function';\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\nexport function toString() {\n  return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n}\nexport function toISOString(keepOffset) {\n  if (!this.isValid()) {\n    return null;\n  }\n\n  var utc = keepOffset !== true,\n      m = utc ? this.clone().utc() : this;\n\n  if (m.year() < 0 || m.year() > 9999) {\n    return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n  }\n\n  if (isFunction(Date.prototype.toISOString)) {\n    // native implementation is ~50x faster, use it when we can\n    if (utc) {\n      return this.toDate().toISOString();\n    } else {\n      return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n    }\n  }\n\n  return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n}\n/**\n * Return a human readable representation of a moment that can\n * also be evaluated to get a new moment which is the same\n *\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n */\n\nexport function inspect() {\n  if (!this.isValid()) {\n    return 'moment.invalid(/* ' + this._i + ' */)';\n  }\n\n  var func = 'moment',\n      zone = '',\n      prefix,\n      year,\n      datetime,\n      suffix;\n\n  if (!this.isLocal()) {\n    func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n    zone = 'Z';\n  }\n\n  prefix = '[' + func + '(\"]';\n  year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n  datetime = '-MM-DD[T]HH:mm:ss.SSS';\n  suffix = zone + '[\")]';\n  return this.format(prefix + year + datetime + suffix);\n}\nexport function format(inputString) {\n  if (!inputString) {\n    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n  }\n\n  var output = formatMoment(this, inputString);\n  return this.localeData().postformat(output);\n}","map":{"version":3,"sources":["/Users/hahn/Desktop/React/info-retrieval-frontend/node_modules/moment/src/lib/moment/format.js"],"names":["formatMoment","hooks","isFunction","defaultFormat","defaultFormatUtc","toString","clone","locale","format","toISOString","keepOffset","isValid","utc","m","year","Date","prototype","toDate","valueOf","utcOffset","replace","inspect","_i","func","zone","prefix","datetime","suffix","isLocal","inputString","isUtc","output","localeData","postformat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEAD,KAAK,CAACE,aAAN,GAAsB,sBAAtB;AACAF,KAAK,CAACG,gBAAN,GAAyB,wBAAzB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACvB,SAAO,KAAKC,KAAL,GAAaC,MAAb,CAAoB,IAApB,EAA0BC,MAA1B,CAAiC,kCAAjC,CAAP;AACH;AAED,OAAO,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AACpC,MAAI,CAAC,KAAKC,OAAL,EAAL,EAAqB;AACjB,WAAO,IAAP;AACH;;AACD,MAAIC,GAAG,GAAGF,UAAU,KAAK,IAAzB;AAAA,MACIG,CAAC,GAAGD,GAAG,GAAG,KAAKN,KAAL,GAAaM,GAAb,EAAH,GAAwB,IADnC;;AAEA,MAAIC,CAAC,CAACC,IAAF,KAAW,CAAX,IAAgBD,CAAC,CAACC,IAAF,KAAW,IAA/B,EAAqC;AACjC,WAAOd,YAAY,CACfa,CADe,EAEfD,GAAG,GACG,gCADH,GAEG,8BAJS,CAAnB;AAMH;;AACD,MAAIV,UAAU,CAACa,IAAI,CAACC,SAAL,CAAeP,WAAhB,CAAd,EAA4C;AACxC;AACA,QAAIG,GAAJ,EAAS;AACL,aAAO,KAAKK,MAAL,GAAcR,WAAd,EAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAIM,IAAJ,CAAS,KAAKG,OAAL,KAAiB,KAAKC,SAAL,KAAmB,EAAnB,GAAwB,IAAlD,EACFV,WADE,GAEFW,OAFE,CAEM,GAFN,EAEWpB,YAAY,CAACa,CAAD,EAAI,GAAJ,CAFvB,CAAP;AAGH;AACJ;;AACD,SAAOb,YAAY,CACfa,CADe,EAEfD,GAAG,GAAG,8BAAH,GAAoC,4BAFxB,CAAnB;AAIH;AAED;;;;;;;AAMA,OAAO,SAASS,OAAT,GAAmB;AACtB,MAAI,CAAC,KAAKV,OAAL,EAAL,EAAqB;AACjB,WAAO,uBAAuB,KAAKW,EAA5B,GAAiC,MAAxC;AACH;;AACD,MAAIC,IAAI,GAAG,QAAX;AAAA,MACIC,IAAI,GAAG,EADX;AAAA,MAEIC,MAFJ;AAAA,MAGIX,IAHJ;AAAA,MAIIY,QAJJ;AAAA,MAKIC,MALJ;;AAMA,MAAI,CAAC,KAAKC,OAAL,EAAL,EAAqB;AACjBL,IAAAA,IAAI,GAAG,KAAKJ,SAAL,OAAqB,CAArB,GAAyB,YAAzB,GAAwC,kBAA/C;AACAK,IAAAA,IAAI,GAAG,GAAP;AACH;;AACDC,EAAAA,MAAM,GAAG,MAAMF,IAAN,GAAa,KAAtB;AACAT,EAAAA,IAAI,GAAG,KAAK,KAAKA,IAAL,EAAL,IAAoB,KAAKA,IAAL,MAAe,IAAnC,GAA0C,MAA1C,GAAmD,QAA1D;AACAY,EAAAA,QAAQ,GAAG,uBAAX;AACAC,EAAAA,MAAM,GAAGH,IAAI,GAAG,MAAhB;AAEA,SAAO,KAAKhB,MAAL,CAAYiB,MAAM,GAAGX,IAAT,GAAgBY,QAAhB,GAA2BC,MAAvC,CAAP;AACH;AAED,OAAO,SAASnB,MAAT,CAAgBqB,WAAhB,EAA6B;AAChC,MAAI,CAACA,WAAL,EAAkB;AACdA,IAAAA,WAAW,GAAG,KAAKC,KAAL,KACR7B,KAAK,CAACG,gBADE,GAERH,KAAK,CAACE,aAFZ;AAGH;;AACD,MAAI4B,MAAM,GAAG/B,YAAY,CAAC,IAAD,EAAO6B,WAAP,CAAzB;AACA,SAAO,KAAKG,UAAL,GAAkBC,UAAlB,CAA6BF,MAA7B,CAAP;AACH","sourcesContent":["import { formatMoment } from '../format/format';\nimport { hooks } from '../utils/hooks';\nimport isFunction from '../utils/is-function';\n\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\nexport function toString() {\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n}\n\nexport function toISOString(keepOffset) {\n    if (!this.isValid()) {\n        return null;\n    }\n    var utc = keepOffset !== true,\n        m = utc ? this.clone().utc() : this;\n    if (m.year() < 0 || m.year() > 9999) {\n        return formatMoment(\n            m,\n            utc\n                ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n    if (isFunction(Date.prototype.toISOString)) {\n        // native implementation is ~50x faster, use it when we can\n        if (utc) {\n            return this.toDate().toISOString();\n        } else {\n            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                .toISOString()\n                .replace('Z', formatMoment(m, 'Z'));\n        }\n    }\n    return formatMoment(\n        m,\n        utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n    );\n}\n\n/**\n * Return a human readable representation of a moment that can\n * also be evaluated to get a new moment which is the same\n *\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n */\nexport function inspect() {\n    if (!this.isValid()) {\n        return 'moment.invalid(/* ' + this._i + ' */)';\n    }\n    var func = 'moment',\n        zone = '',\n        prefix,\n        year,\n        datetime,\n        suffix;\n    if (!this.isLocal()) {\n        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n        zone = 'Z';\n    }\n    prefix = '[' + func + '(\"]';\n    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n    datetime = '-MM-DD[T]HH:mm:ss.SSS';\n    suffix = zone + '[\")]';\n\n    return this.format(prefix + year + datetime + suffix);\n}\n\nexport function format(inputString) {\n    if (!inputString) {\n        inputString = this.isUtc()\n            ? hooks.defaultFormatUtc\n            : hooks.defaultFormat;\n    }\n    var output = formatMoment(this, inputString);\n    return this.localeData().postformat(output);\n}\n"]},"metadata":{},"sourceType":"module"}